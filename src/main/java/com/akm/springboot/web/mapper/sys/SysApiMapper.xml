<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.akm.springboot.web.mapper.sys.SysApiMapper">
  <resultMap id="BaseResultMap" type="com.akm.springboot.web.domain.sys.SysApi">
    <!--@mbg.generated-->
    <id column="id" jdbcType="VARCHAR" property="id"/>
    <result column="parent_id" jdbcType="VARCHAR" property="parentId"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="uri" jdbcType="VARCHAR" property="uri"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="seq" jdbcType="INTEGER" property="seq"/>
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, parent_id, `name`, uri, remark, seq
  </sql>
  <insert id="insertOrUpdate" parameterType="com.akm.springboot.web.domain.sys.SysApi">
    <!--@mbg.generated-->
    insert into sys_api
    (id, parent_id, `name`, uri, remark, seq)
    values
    (#{id,jdbcType=VARCHAR}, #{parentId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
    #{uri,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{seq,jdbcType=INTEGER})
    on duplicate key update
    id = #{id,jdbcType=VARCHAR},
    parent_id = #{parentId,jdbcType=VARCHAR},
    `name` = #{name,jdbcType=VARCHAR},
    uri = #{uri,jdbcType=VARCHAR},
    remark = #{remark,jdbcType=VARCHAR},
    seq = #{seq,jdbcType=INTEGER}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="com.akm.springboot.web.domain.sys.SysApi">
    <!--@mbg.generated-->
    insert into sys_api
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="uri != null">
        uri,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="seq != null">
        seq,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="uri != null">
        #{uri,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="seq != null">
        #{seq,jdbcType=INTEGER},
      </if>
    </trim>
    on duplicate key update
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="uri != null">
        uri = #{uri,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="seq != null">
        seq = #{seq,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  <!--auto generated by MybatisCodeHelper on 2019-08-15-->
  <select id="findByAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from sys_api
    where del = false
    <if test="id != null">
      and id=#{id,jdbcType=VARCHAR}
    </if>
    <if test="parentId != null">
      and parent_id=#{parentId,jdbcType=VARCHAR}
    </if>
    <if test="name != null">
      and `name`=#{name,jdbcType=VARCHAR}
    </if>
    <if test="uri != null">
      and uri=#{uri,jdbcType=VARCHAR}
    </if>
    <if test="remark != null">
      and remark=#{remark,jdbcType=VARCHAR}
    </if>
    <if test="seq != null">
      and seq=#{seq,jdbcType=INTEGER}
    </if>
    order by seq desc
  </select>

  <update id="batchDel">
    update sys_api
    set del=true
    where id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item,jdbcType=INTEGER}
    </foreach>
  </update>


  <!--根据角色id查询该角色对应的api uri，查询的结果会缓存-->
  <select id="getUriByRoleId" resultType="string">
    select distinct api.uri
    from sys_api api
    inner join sys_resource_api ra on api.id = ra.api_id
    inner join sys_role_resource rr on ra.resource_id = rr.resource_id
    inner join sys_role role on rr.role_id = role.id
    where api.del = false
    and role.del = false
    and role.enable = true
    and role.id = #{roleId,jdbcType=VARCHAR}
  </select>

</mapper>